// Filename: ./swarm/items.ts

import { ChatCompletionMessageToolCall } from 'openai/resources';
import { Agent } from './types';

/**
 * Base class for all run items.
 */
export abstract class RunItemBase<T> {
  /** The agent whose run caused this item to be generated */
  agent: Agent;
  
  /** The raw item from the run */
  raw_item: T;
  
  /** The type identifier for this item */
  abstract readonly type: string;
  
  constructor(params: { agent: Agent, raw_item: T }) {
    this.agent = params.agent;
    this.raw_item = params.raw_item;
  }
  
  /**
   * Converts this item into an object suitable for passing back to the model if needed
   */
  toInputItem(): Record<string, any> {
    // Basic implementation - override in subclasses if needed
    if (typeof this.raw_item === 'object') {
      return this.raw_item as any;
    }
    return { content: String(this.raw_item) };
  }
}

/**
 * Represents a message from the LLM.
 */
export class MessageOutputItem extends RunItemBase<any> {
  readonly type = 'message_output_item' as const;
}

/**
 * Represents a tool call e.g. a function call.
 */
export class ToolCallItem extends RunItemBase<ChatCompletionMessageToolCall> {
  readonly type = 'tool_call_item' as const;
}

/**
 * Represents the output of a tool call.
 */
export class ToolCallOutputItem extends RunItemBase<any> {
  readonly type = 'tool_call_output_item' as const;
  
  /** The output of the tool call */
  output: any;
  
  constructor(params: { agent: Agent, raw_item: any, output: any }) {
    super(params);
    this.output = params.output;
  }
}

/**
 * An item generated by an agent.
 */
export type RunItem = MessageOutputItem | ToolCallItem | ToolCallOutputItem;

/**
 * Helper class for working with items.
 */
export class ItemHelpers {
  /**
   * Extracts text content from a message item.
   */
  static extractTextContent(message: any): string {
    if (!message || !message.content) {
      return '';
    }
    
    if (typeof message.content === 'string') {
      return message.content;
    }
    
    // Handle array content (for structured messages)
    if (Array.isArray(message.content)) {
      return message.content
        .filter((part: any) => part.type === 'text')
        .map((part: any) => part.text)
        .join('');
    }
    
    return String(message.content);
  }
  
  /**
   * Creates a formatted representation of a tool call output.
   */
  static formatToolResponse(toolCall: ChatCompletionMessageToolCall, output: string): any {
    return {
      id: toolCall.id,
      function: {
        name: toolCall.function.name,
        output: output
      }
    };
  }
} 